'use client';

import React, { useState } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import Image from 'next/image';
import { User, Bell, ChevronDown, Grid3X3 } from 'lucide-react';
import styles from './HeaderV1.module.css';

interface NavItem {
  label: string;
  path: string;
  hasDropdown?: boolean;
  dropdownItems?: DropdownItem[];
}

interface DropdownItem {
  label: string;
  path: string;
}

interface NavCardData {
  title: string;
  description: string;
  icon: string;
  href: string;
  color: string;
}

const navItems: NavItem[] = [
  {
    label: '–ù–∞—á–∞–ª–æ',
    path: '/',
  },
  {
    label: '–ö–ª–∏–µ–Ω—Ç–∏',
    path: '/clients',
    hasDropdown: true,
    dropdownItems: [
      { label: '–í—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏', path: '/clients' },
      { label: '–î–æ–±–∞–≤–∏ –∫–ª–∏–µ–Ω—Ç', path: '/clients/create' },
      { label: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–∏', path: '/architects' },
      { label: '–ò–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç', path: '/clients/import' }
    ]
  },
  {
    label: '–ü—Ä–æ–µ–∫—Ç–∏',
    path: '/projects',
    hasDropdown: true,
    dropdownItems: [
      { label: '–ê–∫—Ç–∏–≤–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∏', path: '/projects' },
      { label: '–°—ä–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç', path: '/projects/create' },
      { label: '–§–∞–∑–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∏', path: '/projects/phases' },
      { label: '–ê—Ä—Ö–∏–≤', path: '/projects/archive' }
    ]
  },
  {
    label: '–ü—Ä–æ–¥—É–∫—Ç–∏',
    path: '/products',
  },
  {
    label: '–ü–æ—Ä—ä—á–∫–∏',
    path: '/orders',
  },
  {
    label: '–î–æ–∫—É–º–µ–Ω—Ç–∏',
    path: '/documents',
    hasDropdown: true,
    dropdownItems: [
      { label: '–û—Ñ–µ—Ä—Ç–∏', path: '/offers' },
      { label: '–§–∞–∫—Ç—É—Ä–∏', path: '/invoices' },
      { label: '–°–∫–ª–∞–¥–æ–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏', path: '/warehouse' },
      { label: '–î–æ—Å—Ç–∞–≤–∫–∏', path: '/deliveries' }
    ]
  }
];

const navigationCards: NavCardData[] = [
  { 
    title: '–ö–ª–∏–µ–Ω—Ç–∏', 
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏',
    icon: 'üë•',
    href: '/clients',
    color: '#E3F2FD'
  },
  { 
    title: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–∏', 
    description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–∏ –∏ –∫–æ–º–∏—Å–∏–æ–Ω–Ω–∏',
    icon: 'üèóÔ∏è',
    href: '/architects',
    color: '#F3E5F5'
  },
  { 
    title: '–ü—Ä–æ–µ–∫—Ç–∏', 
    description: '–°—ä–∑–¥–∞–≤–∞–Ω–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏',
    icon: 'üìã',
    href: '/projects',
    color: '#EDE7F6'
  },
  { 
    title: '–ü—Ä–æ–¥—É–∫—Ç–∏', 
    description: '–ö–∞—Ç–∞–ª–æ–≥ —Å –ø—Ä–æ–¥—É–∫—Ç–∏ –∏ —Ü–µ–Ω–∏',
    icon: 'üè∑Ô∏è',
    href: '/products',
    color: '#E8F5E9'
  },
  { 
    title: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏', 
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏',
    icon: 'üè≠',
    href: '/manufacturers',
    color: '#FFF3E0'
  },
  { 
    title: '–î–æ—Å—Ç–∞–≤—á–∏—Ü–∏', 
    description: '–î–æ—Å—Ç–∞–≤—á–∏—Ü–∏ –∏ —Å–∫–ª–∞–¥',
    icon: 'üöö',
    href: '/suppliers',
    color: '#FFEBEE'
  },
  { 
    title: '–ê—Ç—Ä–∏–±—É—Ç–∏', 
    description: '–°–∏—Å—Ç–µ–º–∞ –∑–∞ –∞—Ç—Ä–∏–±—É—Ç–∏',
    icon: '‚öôÔ∏è',
    href: '/attributes',
    color: '#E0F2F1'
  },
  { 
    title: '–ê–Ω–∞–ª–∏–∑–∏', 
    description: '–û—Ç—á–µ—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
    icon: 'üìä',
    href: '/analytics',
    color: '#F3E5F5'
  }
];

export default function HeaderV1() {
  const router = useRouter();
  const pathname = usePathname();
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const [notificationCount] = useState(3); // Mock notification count

  const handleMainClick = (path: string) => {
    router.push(path);
  };

  const handleDropdownClick = (path: string) => {
    router.push(path);
    setActiveDropdown(null);
  };

  const handleMouseEnter = (label: string) => {
    setActiveDropdown(label);
  };

  const handleMouseLeave = () => {
    setActiveDropdown(null);
  };

  const handleNavCardClick = (href: string) => {
    router.push(href);
    setActiveDropdown(null);
  };

  const isActive = (path: string) => {
    if (path === '/') {
      return pathname === '/';
    }
    return pathname.startsWith(path);
  };

  return (
    <header className={styles.header}>
      <div className={styles.headerContent}>
        {/* Logo Section */}
        <div className={styles.logoSection}>
          <div className={styles.logo}>
            <Image
              src="/parketsense-logo-mono-black.png"
              alt="PARKETSENSE"
              width={32}
              height={32}
              className={styles.logoImage}
            />
          </div>
          <span className={styles.brandText}>PARKETSENSE ERP</span>
        </div>

        {/* Navigation */}
        <nav className={styles.navigation}>
          {navItems.map((item) => (
            <div
              key={item.label}
              className={`${styles.navItem} ${isActive(item.path) ? styles.active : ''}`}
              onMouseEnter={() => item.hasDropdown && handleMouseEnter(item.label)}
              onMouseLeave={handleMouseLeave}
            >
              <button
                className={styles.navButton}
                onClick={() => handleMainClick(item.path)}
              >
                {item.label}
                {item.hasDropdown && (
                  <ChevronDown className={styles.chevron} size={16} />
                )}
              </button>

              {/* Dropdown Menu */}
              {item.hasDropdown && activeDropdown === item.label && (
                <div className={styles.dropdown}>
                  {item.dropdownItems?.map((dropdownItem) => (
                    <button
                      key={dropdownItem.path}
                      className={styles.dropdownItem}
                      onClick={() => handleDropdownClick(dropdownItem.path)}
                    >
                      {dropdownItem.label}
                    </button>
                  ))}
                </div>
              )}
            </div>
          ))}

          {/* Navigation Cards Menu */}
          <div
            className={styles.navItem}
            onMouseEnter={() => handleMouseEnter('–ú–µ–Ω—é')}
            onMouseLeave={handleMouseLeave}
          >
            <button className={styles.navButton}>
              <Grid3X3 className={styles.menuIcon} size={16} />
              –ú–µ–Ω—é
              <ChevronDown className={styles.chevron} size={16} />
            </button>

            {/* Navigation Cards Dropdown */}
            {activeDropdown === '–ú–µ–Ω—é' && (
              <div className={styles.navigationCardsDropdown}>
                <div className={styles.navigationCardsGrid}>
                  {navigationCards.map((card, index) => (
                    <button
                      key={index}
                      className={styles.navigationCard}
                      onClick={() => handleNavCardClick(card.href)}
                    >
                      <div 
                        className={styles.navigationCardIcon}
                        style={{ backgroundColor: card.color }}
                      >
                        <span className={styles.navigationCardIconEmoji}>
                          {card.icon}
                        </span>
                      </div>
                      <div className={styles.navigationCardContent}>
                        <h3 className={styles.navigationCardTitle}>
                          {card.title}
                        </h3>
                        <p className={styles.navigationCardDescription}>
                          {card.description}
                        </p>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>
        </nav>

        {/* User Menu */}
        <div className={styles.userMenu}>
          {/* Notifications */}
          <div className={styles.notifications}>
            <Bell className={styles.notificationIcon} size={20} />
            {notificationCount > 0 && (
              <span className={styles.notificationBadge}>
                {notificationCount}
              </span>
            )}
          </div>

          {/* User Avatar */}
          <div className={styles.userAvatar}>
            <User className={styles.avatarIcon} size={20} />
            <span className={styles.userInitials}>–ê–ú</span>
          </div>
        </div>
      </div>
    </header>
  );
} 