#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Configuration
const DB_PATH = './prisma/dev.db';
const BACKUP_DIR = './backups';

/**
 * üîÑ PARKETSENSE ERP - Database Restore Script
 * –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –æ—Ç –±–µ–∫—ä–ø —Ñ–∞–π–ª
 */

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function restoreFromBackup(backupFile) {
  try {
    console.log('üîÑ –ó–∞–ø–æ—á–≤–∞–º –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏...');
    
    let backupPath;
    
    if (backupFile) {
      // –ö–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Ñ–∞–π–ª –µ –ø–æ–¥–∞–¥–µ–Ω
      if (path.isAbsolute(backupFile)) {
        backupPath = backupFile;
      } else {
        backupPath = path.join(BACKUP_DIR, backupFile);
      }
    } else {
      // –ò–∑–±–æ—Ä –æ—Ç –Ω–∞–ª–∏—á–Ω–∏ –±–µ–∫—ä–ø–∏
      backupPath = await selectBackup();
    }
    
    if (!backupPath) {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è—Ç–∞ –µ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      process.exit(0);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –±–µ–∫—ä–ø —Ñ–∞–π–ª—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    if (!fs.existsSync(backupPath)) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞: –ë–µ–∫—ä–ø —Ñ–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞:', backupPath);
      process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏
    let currentDbExists = fs.existsSync(DB_PATH);
    if (currentDbExists) {
      const stats = fs.statSync(DB_PATH);
      const currentDate = stats.mtime.toLocaleString('bg-BG');
      const currentSize = Math.round(stats.size / 1024);
      
      console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –©–µ —Å–µ –ø—Ä–µ–∑–∞–ø–∏—à–µ —Ç–µ–∫—É—â–∞—Ç–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏!');
      console.log(`üìÖ –¢–µ–∫—É—â–∞ –±–∞–∑–∞: ${currentDate} | üìè ${currentSize} KB`);
      console.log('');
      
      const confirm = await question('–°–∏–≥—É—Ä–µ–Ω –ª–∏ —Å–∏, —á–µ –∏—Å–∫–∞—à –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—à? (–¥–∞/–Ω–µ): ');
      if (confirm.toLowerCase() !== '–¥–∞' && confirm.toLowerCase() !== 'yes') {
        console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è—Ç–∞ –µ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        rl.close();
        process.exit(0);
      }
      
      // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ–Ω –±–µ–∫—ä–ø –ø—Ä–µ–¥–∏ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ
      console.log('üìÇ –°—ä–∑–¥–∞–≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ–Ω –±–µ–∫—ä–ø –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –±–∞–∑–∞...');
      const autoBackupName = `auto-backup-before-restore-${Date.now()}.db`;
      const autoBackupPath = path.join(BACKUP_DIR, autoBackupName);
      
      if (!fs.existsSync(BACKUP_DIR)) {
        fs.mkdirSync(BACKUP_DIR, { recursive: true });
      }
      
      fs.copyFileSync(DB_PATH, autoBackupPath);
      console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ–Ω –±–µ–∫—ä–ø: ${autoBackupPath}`);
    }
    
    // –ö–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ –±–µ–∫—ä–ø —Ñ–∞–π–ª–∞
    console.log('üîÑ –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏...');
    fs.copyFileSync(backupPath, DB_PATH);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω–∞—Ç–∞ –±–∞–∑–∞
    const restoredStats = fs.statSync(DB_PATH);
    const restoredSize = Math.round(restoredStats.size / 1024);
    
    console.log('‚úÖ –ë–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –µ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÇ –û—Ç: ${backupPath}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä: ${restoredSize} KB`);
    console.log(`‚è∞ –í—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω–∞ –Ω–∞: ${new Date().toLocaleString('bg-BG')}`);
    
    console.log('');
    console.log('üîÑ –ü—Ä–µ–ø–æ—Ä—ä–∫–∞: –°—Ç–∞—Ä—Ç–∏—Ä–∞–π "npm run db:seed" –∞–∫–æ –µ –Ω—É–∂–Ω–æ.');
    
  } catch (error) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

async function selectBackup() {
  try {
    if (!fs.existsSync(BACKUP_DIR)) {
      console.log('‚ùå –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –±–µ–∫—ä–ø–∏. –°—ä–∑–¥–∞–π –±–µ–∫—ä–ø –ø—ä—Ä–≤–æ —Å "npm run db:backup"');
      return null;
    }
    
    const files = fs.readdirSync(BACKUP_DIR);
    const backupFiles = files.filter(file => file.endsWith('.db'));
    
    if (backupFiles.length === 0) {
      console.log('‚ùå –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –±–µ–∫—ä–ø —Ñ–∞–π–ª–æ–≤–µ.');
      return null;
    }
    
    console.log('üìã –ù–∞–ª–∏—á–Ω–∏ –±–µ–∫—ä–ø–∏:');
    console.log('');
    
    const backupsWithStats = backupFiles.map(file => {
      const filePath = path.join(BACKUP_DIR, file);
      const stats = fs.statSync(filePath);
      return {
        file,
        path: filePath,
        date: stats.mtime,
        size: Math.round(stats.size / 1024)
      };
    });
    
    // –°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –ø–æ –¥–∞—Ç–∞ (–Ω–∞–π-–Ω–æ–≤–∏—Ç–µ –ø—ä—Ä–≤–æ)
    backupsWithStats.sort((a, b) => b.date - a.date);
    
    backupsWithStats.forEach((backup, index) => {
      console.log(`${index + 1}. ${backup.file}`);
      console.log(`   üìÖ ${backup.date.toLocaleString('bg-BG')} | üìè ${backup.size} KB`);
      console.log('');
    });
    
    const choice = await question(`–ò–∑–±–µ—Ä–∏ –±–µ–∫—ä–ø (1-${backupsWithStats.length}) –∏–ª–∏ "0" –∑–∞ –æ—Ç–∫–∞–∑: `);
    const choiceNum = parseInt(choice);
    
    if (choiceNum === 0 || isNaN(choiceNum)) {
      return null;
    }
    
    if (choiceNum < 1 || choiceNum > backupsWithStats.length) {
      console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–∑–±–æ—Ä.');
      return null;
    }
    
    return backupsWithStats[choiceNum - 1].path;
    
  } catch (error) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–±–æ—Ä –Ω–∞ –±–µ–∫—ä–ø:', error.message);
    return null;
  }
}

function showHelp() {
  console.log(`
üîÑ PARKETSENSE ERP - Database Restore Tool

–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ:
  node scripts/db-restore.js [backup-file]

–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
  backup-file    –ü—ä—Ç –∫—ä–º –±–µ–∫—ä–ø —Ñ–∞–π–ª (–ø–æ –∏–∑–±–æ—Ä)

–ü—Ä–∏–º–µ—Ä–∏:
  npm run db:restore                           # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–µ–Ω –∏–∑–±–æ—Ä
  npm run db:restore parketsense-backup-*.db  # –ö–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Ñ–∞–π–ª
  node scripts/db-restore.js list             # –ü–æ–∫–∞–∂–∏ –±–µ–∫—ä–ø–∏

‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–∞–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —â–µ –ø—Ä–µ–∑–∞–ø–∏—à–µ —Ç–µ–∫—É—â–∞—Ç–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏!
`);
}

// Command line interface
const command = process.argv[2];

if (command === 'help') {
  showHelp();
  process.exit(0);
}

if (command === 'list') {
  // –ü—Ä–µ–∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ª–æ–≥–∏–∫–∞—Ç–∞ –æ—Ç backup —Å–∫—Ä–∏–ø—Ç–∞
  require('./db-backup.js');
  process.exit(0);
}

// –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ
restoreFromBackup(command); 