#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration
const DB_PATH = './prisma/dev.db';
const BACKUP_DIR = './backups';
const RETENTION_DAYS = 30;

/**
 * üîÑ PARKETSENSE ERP - Database Backup Script
 * –°—ä–∑–¥–∞–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ–Ω –±–µ–∫—ä–ø –Ω–∞ SQLite –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
 */

function createBackup() {
  try {
    console.log('üöÄ –ó–∞–ø–æ—á–≤–∞–º –±–µ–∫—ä–ø –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    if (!fs.existsSync(DB_PATH)) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞: –ë–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞:', DB_PATH);
      process.exit(1);
    }
    
    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    if (!fs.existsSync(BACKUP_DIR)) {
      fs.mkdirSync(BACKUP_DIR, { recursive: true });
      console.log('üìÅ –°—ä–∑–¥–∞–¥–µ–Ω–∞ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', BACKUP_DIR);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∏–º–µ –∑–∞ backup
    const timestamp = new Date().toISOString()
      .replace(/[:.]/g, '-')
      .slice(0, 19);
    const backupName = `parketsense-backup-${timestamp}.db`;
    const backupPath = path.join(BACKUP_DIR, backupName);
    
    // –ö–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
    fs.copyFileSync(DB_PATH, backupPath);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä–∞
    const stats = fs.statSync(backupPath);
    const sizeKB = Math.round(stats.size / 1024);
    
    console.log('‚úÖ –ë–µ–∫—ä–ø —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÇ –§–∞–π–ª: ${backupPath}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä: ${sizeKB} KB`);
    console.log(`‚è∞ –î–∞—Ç–∞: ${new Date().toLocaleString('bg-BG')}`);
    
    // –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∏ backup-–∏
    cleanOldBackups();
    
    return backupPath;
    
  } catch (error) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –±–µ–∫—ä–ø:', error.message);
    process.exit(1);
  }
}

function cleanOldBackups() {
  try {
    const files = fs.readdirSync(BACKUP_DIR);
    const backupFiles = files.filter(file => file.startsWith('parketsense-backup-') && file.endsWith('.db'));
    
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - RETENTION_DAYS);
    
    let deletedCount = 0;
    
    backupFiles.forEach(file => {
      const filePath = path.join(BACKUP_DIR, file);
      const stats = fs.statSync(filePath);
      
      if (stats.mtime < cutoffDate) {
        fs.unlinkSync(filePath);
        deletedCount++;
        console.log(`üóëÔ∏è –ò–∑—Ç—Ä–∏—Ç —Å—Ç–∞—Ä –±–µ–∫—ä–ø: ${file}`);
      }
    });
    
    if (deletedCount > 0) {
      console.log(`üßπ –ü–æ—á–∏—Å—Ç–µ–Ω–∏ ${deletedCount} —Å—Ç–∞—Ä–∏ –±–µ–∫—ä–ø(–∞)`);
    }
    
    console.log(`üìä –û–±—â–æ –±–µ–∫—ä–ø–∏: ${backupFiles.length - deletedCount}`);
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∏ –±–µ–∫—ä–ø–∏:', error.message);
  }
}

function listBackups() {
  try {
    if (!fs.existsSync(BACKUP_DIR)) {
      console.log('üìÅ –ù—è–º–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ –±–µ–∫—ä–ø–∏ –æ—â–µ.');
      return;
    }
    
    const files = fs.readdirSync(BACKUP_DIR);
    const backupFiles = files.filter(file => file.startsWith('parketsense-backup-') && file.endsWith('.db'));
    
    if (backupFiles.length === 0) {
      console.log('üìÅ –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –±–µ–∫—ä–ø–∏.');
      return;
    }
    
    console.log(`üìã –ù–∞–º–µ—Ä–µ–Ω–∏ ${backupFiles.length} –±–µ–∫—ä–ø(–∞):`);
    console.log('');
    
    backupFiles
      .sort()
      .reverse()
      .forEach((file, index) => {
        const filePath = path.join(BACKUP_DIR, file);
        const stats = fs.statSync(filePath);
        const sizeKB = Math.round(stats.size / 1024);
        const date = stats.mtime.toLocaleString('bg-BG');
        
        console.log(`${index + 1}. ${file}`);
        console.log(`   üìÖ ${date} | üìè ${sizeKB} KB`);
        console.log('');
      });
      
  } catch (error) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –±–µ–∫—ä–ø–∏:', error.message);
  }
}

// Command line interface
const command = process.argv[2];

switch (command) {
  case 'create':
  case undefined:
    createBackup();
    break;
    
  case 'list':
    listBackups();
    break;
    
  case 'help':
    console.log(`
üîÑ PARKETSENSE ERP - Database Backup Tool

–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ:
  node scripts/db-backup.js [command]

–ö–æ–º–∞–Ω–¥–∏:
  create (default)  –°—ä–∑–¥–∞–≤–∞ –Ω–æ–≤ –±–µ–∫—ä–ø
  list             –ü–æ–∫–∞–∑–≤–∞ –≤—Å–∏—á–∫–∏ –±–µ–∫—ä–ø–∏  
  help             –ü–æ–∫–∞–∑–≤–∞ —Ç–∞–∑–∏ –ø–æ–º–æ—â

–ü—Ä–∏–º–µ—Ä–∏:
  npm run db:backup           # –°—ä–∑–¥–∞–≤–∞ –±–µ–∫—ä–ø
  node scripts/db-backup.js list  # –ü–æ–∫–∞–∑–≤–∞ –±–µ–∫—ä–ø–∏
`);
    break;
    
  default:
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${command}`);
    console.log('–ò–∑–ø–æ–ª–∑–≤–∞–π "help" –∑–∞ –ø–æ–≤–µ—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.');
    process.exit(1);
} 