generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(uuid())
  email                  String           @unique
  name                   String?
  role                   String           @default("user")
  isActive               Boolean          @default(true)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  updatedAttributeValues AttributeValue[] @relation("AttributeValueUpdatedBy")
  createdAttributeValues AttributeValue[] @relation("AttributeValueCreatedBy")
  updatedClients         Client[]         @relation("ClientUpdatedBy")
  createdClients         Client[]         @relation("ClientCreatedBy")
  updatedProducts        Product[]        @relation("ProductUpdatedBy")
  createdProducts        Product[]        @relation("ProductCreatedBy")

  @@map("users")
}

model Client {
  id                String   @id @default(uuid())
  
  // Personal Information
  firstName         String
  lastName          String
  phone             String?
  email             String?
  address           String?
  
  // Company Information
  hasCompany        Boolean  @default(false)
  companyName       String?
  eikBulstat        String?  @unique
  vatNumber         String?
  companyAddress    String?
  companyPhone      String?
  companyEmail      String?
  companyMol        String?  // МОЛ (Материално отговорно лице)
  
  // Architect/Designer
  isArchitect       Boolean  @default(false)
  commissionPercent Float?   // Комисионна в процент
  
  // Notes
  notes             String?  // Бележки
  
  // System fields
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdById       String?
  updatedById       String?
  updatedBy         User?    @relation("ClientUpdatedBy", fields: [updatedById], references: [id])
  createdBy         User?    @relation("ClientCreatedBy", fields: [createdById], references: [id])
  
  // Projects relations
  projects          Project[] @relation("ClientProjects")
  architectProjects Project[] @relation("ArchitectProjects")

  @@map("clients")
}

model Product {
  id              String                  @id @default(uuid())
  code            String                  @unique
  nameBg          String
  nameEn          String?
  productTypeId   String
  manufacturerId  String
  supplier        String?
  unit            String                  @default("m2")
  packageSize     String?
  costEur         Float?
  costBgn         Float?
  saleBgn         Float?
  saleEur         Float?
  markup          Float?                  @default(30)
  isActive        Boolean                 @default(true)
  isRecommended   Boolean                 @default(false)
  isNew           Boolean                 @default(false)
  
  // Media fields (JSON arrays of file URLs/paths)
  images          Json?                   // Array of image URLs
  documents       Json?                   // Array of document URLs  
  models3d        Json?                   // Array of 3D model URLs
  textures        Json?                   // Array of texture URLs
  videoUrl        String?                 // Single video URL
  
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  createdById     String?
  updatedById     String?
  attributeValues ProductAttributeValue[]
  roomProducts    RoomProduct[]           // Products in project rooms
  updatedBy       User?                   @relation("ProductUpdatedBy", fields: [updatedById], references: [id])
  createdBy       User?                   @relation("ProductCreatedBy", fields: [createdById], references: [id])
  manufacturer    Manufacturer            @relation(fields: [manufacturerId], references: [id])
  productType     ProductType             @relation(fields: [productTypeId], references: [id])

  @@map("products")
}

model AuditLog {
  id        String   @id @default(uuid())
  entity    String
  entityId  String
  action    String
  oldData   String?
  newData   String?
  userId    String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model ProductType {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  nameBg                  String
  nameEn                  String?
  icon                    String?
  description             String?
  displayOrder            Int                       @default(0)
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  attributeTypes          AttributeType[]
  products                Product[]
  productTypeManufacturers ProductTypeManufacturer[]

  @@map("product_types")
}

model Manufacturer {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  displayName             String
  code                    String?                   @unique
  website                 String?
  description             String?
  address                 String?                   // Адрес на производителя
  contactName             String?                   // Име на контактно лице
  contactEmail            String?                   // Мейл на контактно лице
  contactPhone            String?                   // Телефон на контактно лице
  logoUrl                 String?
  colorCode               String?                   @default("#6c757d")
  discount                Float?                    @default(0)    // Отстъпка в процент (0-100)
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  attributeValues         AttributeValue[]
  products                Product[]
  contacts                Contact[]                 // Допълнителни контакти
  productTypeManufacturers ProductTypeManufacturer[]

  @@map("manufacturers")
}

model AttributeType {
  id                     String                  @id @default(uuid())
  name                   String
  nameBg                 String
  nameEn                 String?
  type                   String
  productTypeId          String
  dependencyType         String?                 @default("NONE")
  dependencyValue        String?
  icon                   String?
  description            String?
  isRequired             Boolean                 @default(false)
  displayOrder           Int                     @default(0)
  placeholder            String?
  validation             String?
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  productType            ProductType             @relation(fields: [productTypeId], references: [id])
  attributeValues        AttributeValue[]
  productAttributeValues ProductAttributeValue[]

  @@unique([productTypeId, name])
  @@map("attribute_types")
}

model AttributeValue {
  id                     String                  @id @default(uuid())
  nameBg                 String
  nameEn                 String?
  description            String?
  icon                   String?
  colorCode              String?
  attributeTypeId        String
  manufacturerId         String?
  sortOrder              Int                     @default(0)
  isActive               Boolean                 @default(true)
  isDefault              Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  createdById            String?
  updatedById            String?
  updatedBy              User?                   @relation("AttributeValueUpdatedBy", fields: [updatedById], references: [id])
  createdBy              User?                   @relation("AttributeValueCreatedBy", fields: [createdById], references: [id])
  manufacturer           Manufacturer?           @relation(fields: [manufacturerId], references: [id])
  attributeType          AttributeType           @relation(fields: [attributeTypeId], references: [id])
  productAttributeValues ProductAttributeValue[]

  @@map("attribute_values")
}

model Supplier {
  id              String           @id @default(uuid())
  name            String           @unique
  displayName     String
  code            String?          @unique
  website         String?
  description     String?
  address         String?          // Адрес на доставчика
  contactName     String?          // Име на контактно лице
  contactEmail    String?          // Мейл на контактно лице
  contactPhone    String?          // Телефон на контактно лице
  logoUrl         String?
  colorCode       String?          @default("#6c757d")
  discount        Float?           @default(0)    // Отстъпка в процент (0-100)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  contacts        Contact[]        // Допълнителни контакти

  @@map("suppliers")
}

model Contact {
  id               String        @id @default(uuid())
  name             String        // Име на контакта
  email            String?       // Мейл
  phone            String?       // Телефон
  position         String?       // Длъжност
  department       String?       // Отдел
  isPrimary        Boolean       @default(false)  // Дали е основен контакт
  notes            String?       // Бележки
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Връзки към производители и доставчици
  manufacturerId   String?
  supplierId       String?
  manufacturer     Manufacturer? @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  supplier         Supplier?     @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model ProductAttributeValue {
  id               String          @id @default(uuid())
  productId        String
  attributeTypeId  String
  attributeValueId String?
  customValue      String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  attributeValue   AttributeValue? @relation(fields: [attributeValueId], references: [id])
  attributeType    AttributeType   @relation(fields: [attributeTypeId], references: [id])
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, attributeTypeId])
  @@map("product_attribute_values")
}

model ProductTypeManufacturer {
  id             String       @id @default(uuid())
  productTypeId  String
  manufacturerId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  productType    ProductType  @relation(fields: [productTypeId], references: [id], onDelete: Cascade)
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@unique([productTypeId, manufacturerId])
  @@map("product_type_manufacturers")
}

// ===== PROJECTS MODULE MODELS =====

model Project {
  id                      String            @id @default(uuid())
  clientId                String
  
  // Basic Information
  name                    String
  projectType             String            // apartment, house, office, commercial, other
  address                 String?
  description             String?
  city                    String            @default("София")
  
  // Project Details
  totalArea               Float?
  roomsCount              Int?
  floorsCount             Int?
  estimatedBudget         Float?
  
  // Timeline
  startDate               DateTime?
  expectedCompletionDate  DateTime?
  
  // Architect Information
  architectType           String            @default("none") // none, client, external
  architectId             String?
  architectName           String?
  architectCommission     Float?            @default(0)
  architectPhone          String?
  architectEmail          String?
  
  // Status
  status                  String            @default("draft") // draft, active, completed, archived
  
  // Timestamps
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  deletedAt               DateTime?
  
  // Relations
  client                  Client            @relation("ClientProjects", fields: [clientId], references: [id], onDelete: Restrict)
  architect               Client?           @relation("ArchitectProjects", fields: [architectId], references: [id])
  contacts                ProjectContact[]
  phases                  ProjectPhase[]
  offers                  Offer[]

  @@map("projects")
}

model ProjectContact {
  id              String    @id @default(uuid())
  projectId       String
  
  // Contact Information
  name            String
  phone           String?
  email           String?
  role            String    @default("other") // owner, spouse, architect, accountant, builder, designer, other
  
  // Permissions
  receivesOffers  Boolean   @default(false)
  receivesInvoices Boolean  @default(false)
  receivesUpdates Boolean   @default(false)
  isPrimary       Boolean   @default(false)
  
  // Timestamps
  createdAt       DateTime  @default(now())
  
  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_contacts")
}

model ProjectPhase {
  id          String         @id @default(uuid())
  projectId   String
  
  // Phase Information
  name        String
  description String?
  phaseOrder  Int            @default(1)
  
  // Architect Commission Settings
  includeArchitectCommission Boolean @default(false)
  
  // Status
  status      String         @default("created") // created, quoted, won, lost, archived
  
  // Timestamps
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  variants    PhaseVariant[]
  offers      Offer[]

  @@unique([projectId, phaseOrder])
  @@map("project_phases")
}

model PhaseVariant {
  id                  String        @id @default(uuid())
  phaseId             String
  
  // Variant Information
  name                String
  description         String?
  variantOrder        Int           @default(1)
  
  // Personnel
  designer            String?
  architect           String?
  architectCommission Float?        @default(0)
  
  // Settings
  includeInOffer      Boolean       @default(true)
  discountEnabled     Boolean       @default(true)
  variantDiscount     Float?        @default(0)
  
  // Timestamps
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  // Relations
  phase               ProjectPhase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  rooms               VariantRoom[]

  @@unique([phaseId, variantOrder])
  @@map("phase_variants")
}

model VariantRoom {
  id              String        @id @default(uuid())
  variantId       String
  
  // Room Information
  name            String
  area            Float?
  
  // Pricing Settings
  discount        Float?        @default(0)
  discountEnabled Boolean       @default(true)
  wastePercent    Float?        @default(10)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  variant         PhaseVariant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  products        RoomProduct[]
  images          RoomImage[]

  @@map("variant_rooms")
}

model RoomProduct {
  id              String      @id @default(uuid())
  roomId          String
  productId       String
  
  // Quantities and Prices
  quantity        Float
  unitPrice       Float
  
  // Discounts
  discount        Float?      @default(0)
  discountEnabled Boolean     @default(true)
  
  // Waste
  wastePercent    Float?      @default(10)
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  room            VariantRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  product         Product     @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@map("room_products")
}

model RoomImage {
  id            String      @id @default(uuid())
  roomId        String
  
  // File Information
  filename      String
  originalName  String?
  filePath      String
  fileSize      Int?
  mimeType      String?
  
  // Image Metadata
  width         Int?
  height        Int?
  caption       String?
  
  // Timestamps
  uploadedAt    DateTime    @default(now())
  
  // Relations
  room          VariantRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_images")
}

model Offer {
  id            String         @id @default(uuid())
  projectId     String
  phaseId       String?
  
  // Offer Details
  offerNumber   String         @unique
  subject       String?
  validUntil    DateTime?
  
  // Conditions
  conditions    Json?          // Array of condition strings
  
  // Email Template
  emailSubject  String?
  emailBody     String?
  
  // Status
  status        String         @default("draft") // draft, sent, viewed, accepted, rejected
  
  // Sending History
  sentCount     Int            @default(0)
  lastSentAt    DateTime?
  lastSentTo    String?
  
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phase         ProjectPhase?  @relation(fields: [phaseId], references: [id], onDelete: SetNull)
  history       OfferHistory[]

  @@map("offers")
}

model OfferHistory {
  id              String    @id @default(uuid())
  offerId         String
  
  // History Details
  version         Int
  action          String    // created, sent, viewed, downloaded
  recipientEmail  String?
  
  // Snapshot Data
  snapshotData    Json?
  
  // Timestamps
  createdAt       DateTime  @default(now())
  
  // Relations
  offer           Offer     @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@map("offer_history")
}
